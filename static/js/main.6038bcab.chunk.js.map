{"version":3,"sources":["components/Heading.js","utils.js","components/Canvas.js","components/Button.js","App.js","index.js"],"names":["Heading","className","allPossibleColors","arr","tempArr","i","length","j","k","newColor","red","green","blue","push","makeAllColors","min","max","stepSize","createRgbSteps","Canvas","currentImage","ref","useRef","useEffect","canvas","current","context","getContext","pixelData","createImageData","width","height","finalPixels","colorsArr","pixels","createPixelMap","data","set","Uint8ClampedArray","putImageData","Button","handleClick","id","onClick","App","useState","setImage","image","sort","Math","floor","random","a","b","changeImagePatterns","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAeeA,G,MAbC,WACd,OACE,6BAASC,UAAU,WACjB,sDACA,0GAIA,qFC6DOC,EA1DS,SAACC,GAErB,IADA,IAAIC,EAAU,GACLC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC9B,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAIG,OAAQC,IAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAIG,OAAQE,IAAK,CACnC,IAAIC,EAAW,CACbC,IAAKP,EAAIE,GACTM,MAAOR,EAAII,GACXK,KAAMT,EAAIK,IAEZJ,EAAQS,KAAKJ,GAInB,OAAOL,EA4CwBU,CApEV,SAACC,EAAKC,EAAKC,GAEhC,IADA,IAAIb,EAAU,GACLC,EAAIU,EAAKV,GAAKW,EAAKX,GAAKY,EAC/Bb,EAAQS,KAAKR,GAEf,OAAOD,EA8DSc,CAAe,EAAG,IAAK,IC/C1BC,EApBA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACZC,EAAMC,mBAYV,OAVAC,qBAAU,WACR,IAAMC,EAASH,EAAII,QACbC,EAAUF,EAAOG,WAAW,MAC9BC,EAAYF,EAAQG,gBAAgBL,EAAOM,MAAON,EAAOO,QAEvDC,EDoBoB,SAACC,GAE7B,IADA,IAAIC,EAAS,GACJ7B,EAAI,EAAGA,EAAI4B,EAAU3B,OAAQD,IACpC6B,EAAOrB,KAAKoB,EAAU5B,GAAGK,KACzBwB,EAAOrB,KAAKoB,EAAU5B,GAAGM,OACzBuB,EAAOrB,KAAKoB,EAAU5B,GAAGO,MACzBsB,EAAOrB,KAAK,KAEd,OAAOqB,EC5BeC,CAAef,GACnCQ,EAAUQ,KAAKC,IAAI,IAAIC,kBAAJ,YAA0BN,KAC7CN,EAAQa,aAAaX,EAAW,EAAG,MAInC,yBAAK3B,UAAU,oBACb,4BAAQoB,IAAKA,EAAKpB,UAAU,SAAS6B,MAAM,MAAMC,OAAO,UCN/CS,EAVA,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAChB,OACE,yBAAKxC,UAAU,oBACb,4BAAQA,UAAU,MAAMyC,GAAG,iBAAiBC,QAASF,GAArD,qBCoBSG,MAlBf,WAAgB,IAAD,EACoBC,mBAAS,YAAI3C,IADjC,mBACNkB,EADM,KACQ0B,EADR,KASb,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQmB,aAAcA,IACtB,kBAAC,EAAD,CAAQqB,YAVc,WACxB,IAAIM,EAAK,YAAO7C,GAChB6C,EAAMC,KHgCyB,WAEjC,OADqBC,KAAKC,MAAsB,EAAhBD,KAAKE,WAEnC,KAAK,EACH,OAAO,SAAUC,EAAGC,GAClB,OAAOA,EAAE3C,IAAM0C,EAAExC,MAErB,KAAK,EACH,OAAO,SAAUwC,EAAGC,GAClB,OAAOA,EAAEzC,KAAOwC,EAAExC,MAEtB,KAAK,EACH,OAAO,SAAUwC,EAAGC,GAClB,OAAOA,EAAEzC,KAAOwC,EAAEzC,OAGtB,KAAK,EACH,OAAO,WACL,OAAOsC,KAAKE,SAAW,IAG3B,QACE,QGtDSG,IACXR,EAAS,YAAIC,SCRjBQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.6038bcab.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Heading = () => {\n  return (\n    <section className=\"heading\">\n      <h1>Random Image Generator</h1>\n      <h2>\n        The image below contains all possible RGB colors, each occuring only\n        once.\n      </h2>\n      <h3>Press the refresh button to see different patterns</h3>\n    </section>\n  );\n};\n\nexport default Heading;\n","//THIS FILE CONTAINS ALL THE UTILITY FUNCTIONS TO CREATE RANDOM COLORS AND PIXEL MAP FOR CANVAS\n\n//step generator for each discreet rgb value, e.g. 8 - 256, 32 steps in this case\nconst createRgbSteps = (min, max, stepSize) => {\n  let tempArr = [];\n  for (let i = min; i <= max; i += stepSize) {\n    tempArr.push(i);\n  }\n  return tempArr;\n};\n\n// generate all possible rgb colors from step values.\n// The nested for loops create 32,768 unique color objects with r,g,b properties\nconst makeAllColors = (arr) => {\n  let tempArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      for (let k = 0; k < arr.length; k++) {\n        let newColor = {\n          red: arr[i],\n          green: arr[j],\n          blue: arr[k],\n        };\n        tempArr.push(newColor);\n      }\n    }\n  }\n  return tempArr;\n};\n\n//generate a html canvas pixel map of color values to be plotted on to canvas\nexport const createPixelMap = (colorsArr) => {\n  let pixels = [];\n  for (let i = 0; i < colorsArr.length; i++) {\n    pixels.push(colorsArr[i].red);\n    pixels.push(colorsArr[i].green);\n    pixels.push(colorsArr[i].blue);\n    pixels.push(255);\n  }\n  return pixels;\n};\n\n//create randomized patterns of the colors array to form various images of same colors\n//set as handler to our refresh button\nexport const changeImagePatterns = () => {\n  const randomPicker = Math.floor(Math.random() * 5);\n  switch (randomPicker) {\n    case 0:\n      return function (a, b) {\n        return b.red - a.blue;\n      };\n    case 1:\n      return function (a, b) {\n        return b.blue - a.blue;\n      };\n    case 2:\n      return function (a, b) {\n        return b.blue - a.green;\n      };\n\n    case 3:\n      return function () {\n        return Math.random() - 0.5;\n      };\n\n    default:\n      return;\n  }\n};\n\nconst rgbValues = createRgbSteps(8, 256, 8);\nexport const allPossibleColors = makeAllColors(rgbValues);\n","import React, { useRef, useEffect } from \"react\";\nimport { createPixelMap } from \"../utils\";\n\nconst Canvas = ({ currentImage }) => {\n  let ref = useRef();\n\n  useEffect(() => {\n    const canvas = ref.current;\n    const context = canvas.getContext(\"2d\");\n    let pixelData = context.createImageData(canvas.width, canvas.height);\n\n    const finalPixels = createPixelMap(currentImage);\n    pixelData.data.set(new Uint8ClampedArray([...finalPixels]));\n    context.putImageData(pixelData, 0, 0);\n  });\n\n  return (\n    <div className=\"canvas-container\">\n      <canvas ref={ref} className=\"canvas\" width=\"256\" height=\"128\"></canvas>\n    </div>\n  );\n};\n\nexport default Canvas;\n","import React from \"react\";\n\nconst Button = ({ handleClick }) => {\n  return (\n    <div className=\"button-container\">\n      <button className=\"btn\" id=\"refresh-button\" onClick={handleClick}>\n        Refresh Pattern\n      </button>\n    </div>\n  );\n};\n\nexport default Button;\n","import React, { useState } from \"react\";\nimport \"./styles/App.css\";\nimport Heading from \"./components/Heading\";\nimport Canvas from \"./components/Canvas\";\nimport Button from \"./components/Button\";\nimport { allPossibleColors, changeImagePatterns } from \"./utils\";\n\nfunction App() {\n  const [currentImage, setImage] = useState([...allPossibleColors]);\n\n  const handleImageChange = () => {\n    let image = [...allPossibleColors];\n    image.sort(changeImagePatterns());\n    setImage([...image]);\n  };\n\n  return (\n    <div className=\"App\">\n      <Heading />\n      <Canvas currentImage={currentImage} />\n      <Button handleClick={handleImageChange} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}